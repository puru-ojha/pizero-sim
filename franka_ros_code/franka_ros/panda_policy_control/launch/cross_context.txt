# Cross-Robot Movement Imitation: Record and Playback Workflow

This document outlines the "record and playback" workflow for the Franka-to-xArm robot movement imitation task. This approach decouples the leader (Franka) and follower (xArm) robots, using separate, non-concurrent simulation stages.

## Objective
The primary goal is to enable an xArm 7-DOF robot to mimic a pre-defined movement from a Franka Emika Panda robot. This is achieved by recording the Franka's end-effector trajectory and then replaying it on the xArm using a Forward Kinematics (FK) to Inverse Kinematics (IK) pipeline.

## New Workflow: Record and Playback

This workflow is divided into two distinct phases:

### Phase 1: Trajectory Recording (Franka)
In this phase, we only need the Franka robot simulation.
1.  **Launch Franka Environment:** A launch file starts the Franka Gazebo simulation and its MoveIt! planning environment.
2.  **Plan and Record:** A dedicated Python script (`record_franka_poses.py`) plans a motion for the Franka's end-effector to a target pose.
3.  **Forward Kinematics (FK):** For each point in the planned joint trajectory, the script uses FK to calculate the corresponding 3D pose (position and orientation) of the end-effector.
4.  **Save Path:** The resulting sequence of end-effector poses is serialized and saved to a file (e.g., `franka_poses.json`).

### Phase 2: Trajectory Playback (xArm)
In this phase, we only need the xArm robot simulation.
1.  **Launch xArm Environment:** A separate launch file starts the xArm Gazebo simulation and its MoveIt! planning environment.
2.  **Load Path:** A playback script (`playback_xarm_from_poses.py`) loads the `franka_poses.json` file.
3.  **Inverse Kinematics (IK):** The script uses MoveIt's `compute_cartesian_path` function. This function takes the loaded sequence of poses as waypoints and performs the necessary IK calculations to generate a valid joint trajectory for the xArm.
4.  **Execute Trajectory:** The script commands the xArm's controllers to execute the generated trajectory, causing it to mimic the Franka's original movement.

## Key Files for this Workflow
-   **Recording Script:** `record_franka_poses.py`
-   **Recording Launch File:** `record_trajectory.launch`
-   **Playback Script:** `playback_xarm_from_poses.py`
-   **Playback Launch File:** `playback_trajectory.launch`
-   **Trajectory Data:** `franka_poses.json`

This decoupled approach simplifies the simulation process and removes the need for real-time communication between two concurrent Gazebo instances.