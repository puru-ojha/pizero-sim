# Cross-Robot Movement Imitation: Franka to xArm

## 1. Project Overview

This project enables a UFACTORY xArm 7-DOF robot to accurately imitate the motion of a Franka Emika Panda robot. The workflow is decoupled into two main phases:

1.  **Recording Phase:** A trajectory is planned and recorded for the Franka Panda's end-effector in a Gazebo simulation. The sequence of end-effector poses (position and orientation) is saved to a file.
2.  **Playback Phase:** In a separate Gazebo simulation, the recorded poses are loaded and used as targets for the xArm. An Inverse Kinematics (IK) solver calculates the necessary joint trajectory for the xArm to follow, effectively mimicking the Franka's original motion.

This "record and playback" approach simplifies the process by avoiding the need for real-time communication between two concurrent simulations.

## 2. Key Files

### Recording (Franka)
*   **Launch File:** `franka_gazebo/launch/panda.launch`
*   **Recording Script:** `Cross_Movement/Franka_Recording/src/record_franka_poses.py`
*   **Recording Launch:** `franka_recording/launch/record_moveit.launch`
*   **Trajectory Output:** `franka_poses.json`

### Playback (xArm)
*   **Launch File:** `xarm_gazebo/launch/xarm7_new.launch`
*   **Playback Script:** `Cross_Movement/xarm_Following/src/playback_xarm_from_poses.py`
*   **Playback Launch:** `xarm_following/launch/playback_ik.launch`

## 3. Key Challenges and Solutions

Achieving accurate motion imitation required overcoming several geometric and configuration challenges:

*   **URDF Simplification:** The full URDF for the xArm, which included a Realsense camera and other peripherals, was too complex for the `ikpy` library used in the playback script. A simplified, kinematically-equivalent URDF (`xarm7_ik_clean.urdf`) was generated by running the `xacro` tool on the original source files with arguments to disable non-essential hardware. This provided the IK solver with a clean and reliable model of the robot arm.

*   **Base Pose Correction:** The Franka and xArm robots are spawned at different locations and orientations in their respective Gazebo worlds. The xArm base, in particular, has a 90-degree yaw rotation relative to the Franka base. This was addressed by calculating a precise base-to-base transformation matrix and applying it to every recorded pose. This correction ensures that the trajectory is correctly mapped from the Franka's coordinate system to the xArm's.

*   **End-Effector and Tool Offsets:** The Franka and xArm have different physical end-effectors and grippers, resulting in different transformations from the final wrist link to the Tool Center Point (TCP). A second correction matrix was calculated to account for these differences. This matrix, derived from `tf_echo` data, transforms the desired TCP pose into the required target pose for the robot's end-effector link, ensuring the IK solver works towards the correct goal.

## 4. Important Transformation Data

The accuracy of the playback relies on precise transformation data. The following values were captured from the live Gazebo simulations using `rosrun tf tf_echo` and are used in the `playback_xarm_from_poses.py` script to calculate the necessary corrections.

### Commands to Capture Data
*   **For xArm:** `rosrun tf tf_echo link_base link_eef`
*   **For Franka:** `rosrun tf tf_echo panda_link0 panda_hand_tcp`

### Robot Base Poses in World
*   **Franka (`panda.launch`):**
    *   Position (x, y, z): `[-0.2, -0.8, 1.021]`
    *   Orientation (roll, pitch, yaw): `[0, 0, 0]`
*   **xArm (`xarm7_new.launch`):**
    *   Position (x, y, z): `[-0.2, -0.6, 1.021]`
    *   Orientation (roll, pitch, yaw): `[0, 0, 1.5708]` (90 degrees)

### End-Effector Poses at Home Position
*   **xArm (`link_base` -> `link_eef`):**
    *   Translation: `[0.205, 0.0, 0.120]`
    *   Quaternion (x, y, z, w): `[1.0, 0.0, 0.0, 0.0]` (Simplified)
*   **Franka (`panda_link0` -> `panda_hand_tcp`):**
    *   Translation: `[0.138, 0.004, 0.839]`
    *   Quaternion (x, y, z, w): `[0.966, 0.253, 0.057, 0.013]`

## 5. Running the Full Pipeline

**Part 1: Record Franka Trajectory**

1.  **Terminal 1: Launch Franka Simulation**
    ```bash
    roslaunch franka_gazebo panda.launch controller:=position_joint_trajectory_controller
    ```
2.  **Terminal 2: Run the Recording Script**
    ```bash
    roslaunch franka_recording record_moveit.launch
    ```
    Wait for the script to finish. It will save `franka_poses.json`. Once done, you can close the Franka simulation (Ctrl+C in Terminal 1).

**Part 2: Playback on xArm**

1.  **Terminal 1: Launch xArm Simulation**
    ```bash
    roslaunch xarm_gazebo xarm7_new.launch
    ```
2.  **Terminal 2: Run the Playback Script**
    ```bash
    roslaunch xarm_following playback_ik.launch
    ```
    The xArm will now execute the trajectory.

    
 - Iniital Xarm position                                                                                                     │
 │    169 -        default="-J joint1 -0.5                                                                                            │
 │    170 -                 -J joint2 -0.6                                                                                            │
 │    171 -                 -J joint3 0.5                                                                                             │
 │    172 -                 -J joint4 1.2                                                                                             │
 │    173 -                 -J joint5 0.0                                                                                             │
 │    174 -                 -J joint6 1.2                                                                                             │
 │    175 -                 -J joint7 0                                                                                               │
 │    176 -                                                                                                                           │
 │    177 - Initial Franka Panda Position                                                                                             │
 │    178 -        default="-J $(arg arm_id)_joint1 0                                                                                 │
 │    179 -                 -J $(arg arm_id)_joint2 -0.785                                                                            │
 │    180 -                 -J $(arg arm_id)_joint3 0                                                                                 │
 │    181 -                 -J $(arg arm_id)_joint4 -2.356                                                                            │
 │    182 -                 -J $(arg arm_id)_joint5 0                                                                                 │
 │    183 -                 -J $(arg arm_id)_joint6 1.571                                                                             │
 │    184 -                 -J $(arg arm_id)_joint7 0.785                                                                             │
 │    185 -                 -J $(arg arm_id)_finger_joint1 0.001                                                                      │
 │    186 -                 -J $(arg arm_id)_finger_joint2 0.001"  