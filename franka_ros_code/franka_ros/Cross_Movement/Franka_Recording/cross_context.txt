# Cross-Robot Movement Imitation: Record and Playback Workflow

This document outlines the "record and playback" workflow for the Franka-to-xArm robot movement imitation task. This approach decouples the leader (Franka) and follower (xArm) robots, using separate, non-concurrent simulation stages.

## Objective
The primary goal is to enable an xArm 7-DOF robot to mimic a pre-defined movement from a Franka Emika Panda robot. This is achieved by recording the Franka's end-effector trajectory and then replaying it on the xArm using a Forward Kinematics (FK) to Inverse Kinematics (IK) pipeline.

## New Workflow: Record and Playback

This workflow is divided into two distinct phases:

### Phase 1: Trajectory Recording (Franka)
In this phase, we only need the Franka robot simulation.
1.  **Launch Franka Environment:** A launch file starts the Franka Gazebo simulation and its MoveIt! planning environment.
2.  **Plan and Record:** A dedicated Python script (`record_franka_poses.py`) plans a motion for the Franka's end-effector to a target pose.
3.  **Forward Kinematics (FK):** For each point in the planned joint trajectory, the script uses FK to calculate the corresponding 3D pose (position and orientation) of the end-effector.
4.  **Save Path:** The resulting sequence of end-effector poses is serialized and saved to a file (e.g., `franka_poses.json`).

### Phase 2: Trajectory Playback (xArm)
In this phase, we only need the xArm robot simulation.
1.  **Launch xArm Environment:** A separate launch file starts the xArm Gazebo simulation and its MoveIt! planning environment.
2.  **Load Path:** A playback script (`playback_xarm_from_poses.py`) loads the `franka_poses.json` file.
3.  **Inverse Kinematics (IK):** The script uses MoveIt's `compute_cartesian_path` function. This function takes the loaded sequence of poses as waypoints and performs the necessary IK calculations to generate a valid joint trajectory for the xArm.
4.  **Execute Trajectory:** The script commands the xArm's controllers to execute the generated trajectory, causing it to mimic the Franka's original movement.

## Gazebo Simulation Setup
Details the specific Gazebo environments for each phase.

### Phase 1: Franka (Leader) Environment
- **Launch File:** `franka_gazebo/launch/panda.launch`
- **Purpose:** Spawns the Franka Panda robot and the required objects (bowl, marker) into a Gazebo world.
- **Robot Base Position:** `x=-0.2, y=-0.8, z=1.021`
- **Command:** `roslaunch franka_gazebo panda.launch`

### Phase 2: xArm (Follower) Environment
- **Launch File:** `xarm_gazebo/launch/xarm7_new.launch`
- **Purpose:** Spawns the xArm7 robot and the same objects into a Gazebo world for the playback phase.
- **Robot Base Position:** `x=-0.2, y=-0.6, z=1.021`, `yaw=1.571`
- **Command:** `roslaunch xarm_gazebo xarm7_new.launch`

## Running the Full Pipeline

**Part 1: Record Franka Trajectory**

1.  **Terminal 1: Launch Franka Simulation**
    ```bash
    roslaunch franka_gazebo panda.launch controller:=position_joint_trajectory_controller
    ```
2.  **Terminal 2: Run the Recording Script**
    ```bash
    roslaunch franka_recording record_moveit.launch
    ```
    Wait for the script to finish. It will save `franka_poses.json`. Once done, you can close the Franka simulation (Ctrl+C in Terminal 1).

**Part 2: Playback on xArm**

1.  **Terminal 1: Launch xArm Simulation**
    ```bash
    roslaunch xarm_gazebo xarm7_new.launch
    ```
2.  **Terminal 2: Run the Playback Script**
    ```bash
    roslaunch xarm_following playback_ik.launch
    ```
    The xArm will now execute the trajectory.

## Kinematic Correction and Findings

During testing, a significant orientation mismatch was observed between the Franka's recorded motion and the xArm's playback. The root cause was traced to fundamental differences in the kinematic definitions (URDFs) of the two robots, even when their bases were perfectly aligned in the Gazebo world.

This was diagnosed and confirmed using `rosrun tf tf_echo` to inspect the live transformations in each robot's simulation.

### 1. Base-to-Wrist Mismatch

The first issue is the inherent rotational difference between each robot's base and its wrist (end-effector flange) when both are at their "home" (zero-joint) position.

-   **xArm (`link_base` -> `link7`):**
    -   **Quaternion:** `[0.0, 0.0, 1.0, 0.0]`
    -   **Analysis:** A 180-degree rotation around the Z-axis.

-   **Franka (`panda_link0` -> `panda_link8`):
    -   **Quaternion:** `[0.990, -0.131, 0.058, -0.010]`
    -   **Analysis:** A complex, non-aligned orientation.

**Conclusion:** The robots have different "zero-pose" orientations. A direct pose transfer is impossible without a correction.

### 2. Wrist-to-TCP (Tool) Mismatch

The second issue is the difference in the static transform from the wrist to the final Tool Center Point (TCP).

-   **xArm (`link7` -> `link_tcp`):
    -   **Translation:** `[0.0, 0.0, 0.172]`
    -   **Rotation:** `[0.0, 0.0, 0.0, 1.0]` (No rotation)

-   **Franka (`panda_link8` -> `panda_hand_tcp`):
    -   **Translation:** `[0.0, 0.0, 0.103]`
    -   **Rotation:** `[0.0, 0.0, -0.383, 0.924]` (-45 degree rotation around Z)

**Conclusion:** The tools have different lengths and the Franka gripper has a built-in -45 degree twist.

### Solution: Two-Stage Correction

To resolve this, a two-stage correction was implemented in the `playback_xarm_from_poses.py` script. For every pose loaded from the Franka's trajectory, the script:

1.  **Applies a Base Correction:** It first applies a calculated rotation to compensate for the base-to-wrist orientation difference.
2.  **Applies a Tool Correction:** It then applies a second transformation to account for the differences in tool length and rotation.

This ensures that the target pose for the xArm's IK solver is correctly mapped from the Franka's coordinate system, resulting in accurate motion playback.

## Current Problem and Strategy

### Solved Problems
-   **URDF Configuration (Franka):** The mismatch between the loaded URDF and SRDF for the Franka robot was resolved. We now use `panda_moveit.urdf.xacro` (which includes `franka_robot_no_camera.xacro`) to ensure MoveIt loads the robot model without camera-related conflicts and with the gripper enabled. This involved modifying `panda_moveit_config/launch/planning_context.launch` to correctly reference these custom xacro files and pass `hand:=true`.
-   **`record_franka_poses.py` Script Debugging (Phase 1 Completion):**
    -   **Syntax Errors (f-strings):** Resolved `SyntaxError` by replacing f-strings with `.format()` calls in `record_franka_poses.py` to ensure compatibility with the ROS Python environment.
    -   **`ImportError: No module named yaml`:** Addressed by ensuring `pyyaml` was correctly installed and accessible to the ROS Python 3 interpreter.
    -   **`AttributeError: 'dict' object has no attribute 'x'`:** Fixed by correctly instantiating `geometry_msgs.msg.Point` and `geometry_msgs.msg.Quaternion` objects when defining `Pose` messages in `record_franka_poses.py`.
    -   **"Action client not connected" / "Unable to identify any set of controllers":** Resolved by configuring `panda_moveit_config/config/simple_moveit_controllers.yaml` to explicitly use `position_joint_trajectory_controller` as the default for the `panda_arm` group, aligning MoveIt's expectations with the working controller.
    -   **Phase 1 Success:** The `record_franka_poses.py` script now successfully plans trajectories, computes forward kinematics, and saves the Franka's end-effector poses to `franka_poses.json`.

-   **xArm MoveIt! Configuration & Controller Issues (Phase 2 Debugging):**
    -   **"Robot semantic description not found" / "Group 'xarm_gripper' was not found" / "Group 'xarm7' was not found":**
        -   The `planning_context.launch` in `xarm7_moveit_config` was initially commented out in `move_group.launch`, preventing the SRDF from being loaded. This was re-enabled.
        -   The `add_gripper` argument was not being propagated from `playback_moveit.launch` to `xarm7_moveit_config/launch/move_group.launch` and then to `planning_context.launch`. This was fixed by explicitly passing `add_gripper="true"` in `playback_moveit.launch` and ensuring `move_group.launch` passes it to `planning_context.launch`.
        -   Switched from `xarm7_moveit_config` to `xarm7_gripper_moveit_config` in `playback_moveit.launch` as it's specifically designed for the xArm with a gripper.
        -   Ensured `xarm7_gripper_moveit_config/launch/move_group.launch` passes `load_robot_description="true"` to its `planning_context.launch`.
    -   **"Unable to connect to move_group action server 'move_group' within allotted time (5s)":**
        -   Increased `controller_manager_startup_timeout` in `xarm7_gripper_moveit_config/launch/move_group.launch` to 30 seconds to give the `move_group` node more time to initialize its internal components and action servers.
        -   Increased `moveit_commander_connection_timeout` for the `xarm_player` node in `playback_moveit.launch` to 20 seconds to give the Python script more time to connect to the `move_group` action server.
    -   **Incorrect Controller Naming/Namespace:**
        -   The `controllers.yaml` and `controllers_with_gripper.yaml` in `xarm7_gripper_moveit_config/config` had incorrect or empty controller names. These were updated to include the `/xarm` namespace and the correct controller names (e.g., `/xarm/xarm7_traj_controller`, `/xarm/gripper_traj_controller`).
        -   The `action_ns` and `type` for the gripper controller in `controllers_with_gripper.yaml` were corrected to `follow_joint_trajectory` and `FollowJointTrajectory` respectively, to match the actual controller type.
    -   **"arg 'gripper_controller' is not defined":**
        -   The `gripper_controller` argument was not being passed to `xarm7_gripper_moveit_config/launch/move_group.launch`. This was fixed by adding `gripper_controller="true"` to the include statement in `playback_moveit.launch`.
    -   **"Kinematics solver doesn't support #attempts anymore":**
        -   Removed `kinematics_solver_attempts` from `xarm7_gripper_moveit_config/config/kinematics.yaml`.

### Problem Description
Even after applying the base and tool corrections, the xArm's motion is not perfectly imitating the Franka. The root cause is now believed to be a fundamental mismatch between the URDF model used for Inverse Kinematics and the one used for the Gazebo simulation.

- **IK Model:** The `playback_xarm_from_poses.py` script uses `ikpy` with a simplified, hardcoded URDF (`xarm7_nomesh.urdf`).
- **Simulation Model:** Gazebo uses a full URDF dynamically generated from `xarm_device.urdf.xacro`, which includes extra hardware like a Realsense camera.

### URDF and IK Solver Mismatch
Attempts to programmatically verify the kinematics of `xarm7_nomesh.urdf` against the live Gazebo simulation have failed. The `ikpy` library is unable to correctly parse the simplified URDF, indicating that it is likely corrupt, incomplete, or structured in a non-standard way.

This makes the simplified URDF an unreliable foundation for the IK calculations that are essential for the playback. The remaining motion inaccuracies are a direct result of the IK solver working with a flawed "blueprint" of the robot.

### Current Strategy
The new strategy is to abandon the problematic `xarm7_nomesh.urdf` file entirely.
1.  **Generate a Clean URDF:** Create a new, reliable URDF (`xarm7_ik_clean.urdf`) by running the `xacro` tool on the original `xarm_device.urdf.xacro` but with arguments to disable non-essential hardware like the camera and gripper.
2.  **Verify the Clean URDF:** Use the deep comparison script to prove that this new URDF is kinematically identical to the arm portion of the robot running in Gazebo.
3.  **Update Playback Script:** Once verified, update `playback_xarm_from_poses.py` to use this new, clean, and reliable URDF for all IK calculations.


## Key Files for this Workflow
-   **Gazebo Launch (Franka):** `franka_gazebo/launch/panda.launch`
-   **Gazebo Launch (xArm):** `xarm_gazebo/launch/xarm7_new.launch`
-   **Recording Script:** `Cross_Movement/Franka_Recording/src/record_franka_poses.py`
-   **Recording Launch File:** `Cross_Movement/Franka_Recording/launch/record_moveit.launch`
-   **Playback Script:** `Cross_Movement/xarm_Following/src/playback_xarm_from_poses.py`
-   **Playback Launch File:** `Cross_Movement/xarm_Following/launch/playback_ik.launch`
-   **Trajectory Data:** `franka_poses.json` (generated in the `Franka_Recording` package)

This decoupled approach simplifies the simulation process and removes the need for real-time communication between two concurrent Gazebo instances.


Iniital Xarm position 
       default="-J joint1 -0.5
                -J joint2 -0.6
                -J joint3 0.5
                -J joint4 1.2
                -J joint5 0.0
                -J joint6 1.2
                -J joint7 0

Initial Franka Panda Position
       default="-J $(arg arm_id)_joint1 0
                -J $(arg arm_id)_joint2 -0.785
                -J $(arg arm_id)_joint3 0
                -J $(arg arm_id)_joint4 -2.356
                -J $(arg arm_id)_joint5 0
                -J $(arg arm_id)_joint6 1.571
                -J $(arg arm_id)_joint7 0.785
                -J $(arg arm_id)_finger_joint1 0.001
                -J $(arg arm_id)_finger_joint2 0.001"